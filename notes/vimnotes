` jumps to marker position, ' just jumps to the line.

aw is a word, iw is inner word, based on w movement.
* daw -> deletes word under cursor and whitespace following it
* diw -> deletes word under cursor
as and is are similar, based on sentence movements ) and (.
ap and ip are similar, based on paragraph movements } and {.
Similarly can be done for ", ' and `
* ci" ->  changes contents of a string
Also can be done for () (use ) or b), [], {} and html tags (use t for block, > for actual tag).

vim-surround
* cs"' -> changes " quotes to ' around cursor position.
* cst<q> -> changes some html tags to <q> and </q>
* cs]} -> changes square braces to curly ones
* ds" -> deletes "
* ysiw] -> wrap word in ]
* yss] -> wrap line in ]
* In visual selection S) will wrap the selection in ()

quickfix
:ll current (or indexed), :ln for next, :lp for previous.

o to insert on newline, O for prev newline

ctags
Run ctags -R . from project root to create tags file.
* C-] -> jump to definition of thing-cursor-is-on
* :stag or C-W ] -> open tag definition in new window
: :ptag or C-W } -> open tag definition in preview window
* C-t -> jump back up from some of the above jumps
* :ta[g] {ident} -> jump to ident's definition, can do regex (prefix with /)
* :tags -> show tags we've traversed
Browsing multiple results:
* :ts or :tagselect -> show list of tags matching
* :tags or :tagstack-> show stack of tags jumped through
* :tn, :tp -> next, prev
* :tf, :tl -> first, last
\b runs tagbar
vim -t {ident} opens vim at tag definition.

; will repeat motions like f, t, etc.

%< resolves to current filename (with path) without extension.
* :e %<.h -> opens header if in same directory

[{ jumps to starting { of current code block. ]} does similarly for end of code
block. Also can use [( and ]).

q: opens command history editor, use it to edit commands like a normal buffer
before hitting enter on one to run it. E.g. useful for iteratively constructing
long regexes.

In :Ex can use % to create new file.

Windows stuff:
* C-w gf -> opens file under cursor in new tab.
* C-w H -> moves window to left half of screen. Similar for JKL.
* C-w r -> rotates the windows in the current row, swapping their positions.

vim-indentwise
* [= -> goes to previous line of same indent level.
* ]= -> goes to next line of same indent level.
* - or + can be used for lesser indent and greater indent level.
* 2]+ -> supports counts.
* 1]_ -> use _ to do absolute indent level.
* ]% -> use % to go to beginning or end of current indent block.

:%s//new-string/g will replace highlighted instances with new-string. Combine with * for fast search and replace.
